{"version":3,"file":"zip-ex-http.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip-ex-http.ts"],"names":[],"mappings":";;;;AAOA,gCAAgC;AAChC,uDAAwC;AAExC,mCAAqC;AACrC,6BAA0B;AAE1B,+BAAoD;AAIpD,MAAM,KAAK,GAAG,MAAM,CAAC,0BAA0B,CAAC,CAAC;AAEjD,MAAa,eAAgB,SAAQ,SAAG;IAQpC,YAA6B,MAAc;QACvC,KAAK,EAAE,CAAC;QADiB,WAAM,GAAN,MAAM,CAAQ;QAEvC,KAAK,CAAC,oBAAoB,MAAM,EAAE,CAAC,CAAC;IAExC,CAAC;IAVM,MAAM,CAAO,WAAW,CAAC,MAAc;;YAC1C,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;QACxD,CAAC;KAAA;IAUM,WAAW;QACd,KAAK,CAAC,kCAAkC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5D,CAAC;IAEM,YAAY;QACf,OAAO,CAAC,CAAC;IACb,CAAC;IAEM,UAAU;QACb,OAAO,IAAI,CAAC;IAChB,CAAC;IAEY,QAAQ,CAAC,SAAiB;;YAEnC,KAAK,CAAC,kBAAkB,SAAS,EAAE,CAAC,CAAC;YAErC,MAAM,GAAG,GAAG,IAAI,SAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEjC,GAAG,CAAC,QAAQ,IAAI,SAAS,CAAC;YAC1B,MAAM,WAAW,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YACnC,KAAK,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YAEpC,OAAO,IAAI,OAAO,CAAC,CAAO,UAAU,EAAE,UAAU,EAAE,EAAE;gBAEhD,MAAM,OAAO,GAAG,CAAO,GAAQ,EAAE,EAAE;oBAC/B,KAAK,CAAC,GAAG,CAAC,CAAC;oBAEX,UAAU,CAAC,KAAK,CAAC,CAAC;gBACtB,CAAC,CAAA,CAAC;gBAEF,MAAM,OAAO,GAAG,CAAO,QAAyB,EAAE,EAAE;oBAShD,IAAI,QAAQ,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,GAAG,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,CAAC,EAAE;wBAElF,UAAU,CAAC,KAAK,CAAC,CAAC;wBAClB,OAAO;qBACV;oBAED,UAAU,CAAC,IAAI,CAAC,CAAC;gBACrB,CAAC,CAAA,CAAC;gBAEF,MAAM,OAAO,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBAClD,uBAAI,CAAC,OAAO,iCACL,IAAI,SAAG,CAAC,WAAW,CAAC,KACvB,OAAO,EAAE,EAAE,EACX,MAAM,EAAE,MAAM,IAChB;yBACG,EAAE,CAAC,UAAU,EAAE,CAAO,QAAyB,EAAE,EAAE;wBAChD,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAC;wBACxB,OAAO,EAAE,CAAC;oBACd,CAAC,CAAA,CAAC;yBACD,EAAE,CAAC,OAAO,EAAE,CAAO,GAAQ,EAAE,EAAE;wBAC5B,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,EAAE,CAAC;oBACb,CAAC,CAAA,CAAC;yBACD,GAAG,EAAE,CAAC;gBACf,CAAC,CAAC,CAAC;gBACH,IAAI;oBACA,MAAM,OAAO,CAAC;iBACjB;gBAAC,OAAO,GAAG,EAAE;iBAEb;YACL,CAAC,CAAA,CAAC,CAAC;QACP,CAAC;KAAA;IAEY,UAAU;;YAEnB,OAAO,IAAI,OAAO,CAAW,CAAO,QAAQ,EAAE,MAAM,EAAE,EAAE;gBACpD,MAAM,CAAC,kBAAkB,CAAC,CAAC;YAC/B,CAAC,CAAA,CAAC,CAAC;QACP,CAAC;KAAA;IAEY,kBAAkB,CAAC,SAAiB;;YAE7C,KAAK,CAAC,uBAAuB,SAAS,EAAE,CAAC,CAAC;YAM1C,MAAM,GAAG,GAAG,IAAI,SAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEjC,GAAG,CAAC,QAAQ,IAAI,SAAS,CAAC;YAC1B,MAAM,WAAW,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YACnC,KAAK,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YAEpC,OAAO,IAAI,OAAO,CAAC,CAAO,UAAU,EAAE,SAAS,EAAE,EAAE;gBAE/C,MAAM,OAAO,GAAG,CAAO,GAAQ,EAAE,EAAE;oBAC/B,KAAK,CAAC,GAAG,CAAC,CAAC;oBACX,SAAS,CAAC,GAAG,CAAC,CAAC;gBACnB,CAAC,CAAA,CAAC;gBAEF,MAAM,OAAO,GAAG,CAAO,QAAyB,EAAE,EAAE;oBAShD,IAAI,QAAQ,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,GAAG,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,CAAC,EAAE;wBAClF,MAAM,OAAO,CAAC,YAAY,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC;wBAClD,OAAO;qBACV;oBAED,IAAI,MAAM,GAAG,CAAC,CAAC;oBACf,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;oBACrD,IAAI,SAAS,EAAE;wBACX,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;qBACpC;oBAED,MAAM,MAAM,GAAG,IAAI,oBAAW,EAAE,CAAC;oBACjC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEtB,MAAM,eAAe,GAAqB;wBACtC,MAAM;wBACN,KAAK,EAAE,GAAS,EAAE;4BACd,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;wBAC9C,CAAC,CAAA;wBACD,MAAM;qBACT,CAAC;oBACF,UAAU,CAAC,eAAe,CAAC,CAAC;gBAiBhC,CAAC,CAAA,CAAC;gBAEF,MAAM,OAAO,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBAClD,uBAAI,CAAC,GAAG,iCACD,IAAI,SAAG,CAAC,WAAW,CAAC,KACvB,OAAO,EAAE,EAAE,IACb;yBACG,EAAE,CAAC,UAAU,EAAE,CAAO,QAAyB,EAAE,EAAE;wBAChD,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAC;wBACxB,OAAO,EAAE,CAAC;oBACd,CAAC,CAAA,CAAC;yBACD,EAAE,CAAC,OAAO,EAAE,CAAO,GAAQ,EAAE,EAAE;wBAC5B,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,EAAE,CAAC;oBACb,CAAC,CAAA,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;gBACH,IAAI;oBACA,MAAM,OAAO,CAAC;iBACjB;gBAAC,OAAO,GAAG,EAAE;iBAEb;YACL,CAAC,CAAA,CAAC,CAAC;QACP,CAAC;KAAA;CACJ;AAxLD,0CAwLC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport { http } from \"follow-redirects\";\nimport { IncomingMessage } from \"http\";\nimport { PassThrough } from \"stream\";\nimport { URL } from \"url\";\n\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\n\n// import { bufferToStream } from \"../stream/BufferUtils\";\n\nconst debug = debug_(\"r2:utils#zip/zip-ex-http\");\n\nexport class ZipExplodedHTTP extends Zip {\n\n    public static async loadPromise(urlStr: string): Promise<IZip> {\n        return Promise.resolve(new ZipExplodedHTTP(urlStr));\n    }\n\n    // private readonly url: URL;\n\n    private constructor(readonly urlStr: string) {\n        super();\n        debug(`ZipExplodedHTTP: ${urlStr}`);\n        // this.url = new URL(urlStr);\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: ZipExplodedHTTP -- \" + this.urlStr);\n    }\n\n    public entriesCount(): number {\n        return 0; // TODO: hacky! (not really needed ... but still)\n    }\n\n    public hasEntries(): boolean {\n        return true; // TODO: hacky\n    }\n\n    public async hasEntry(entryPath: string): Promise<boolean> {\n\n        debug(`hasEntryAsync: ${entryPath}`);\n\n        const url = new URL(this.urlStr);\n        // url.pathname += (\"/\" + entryPath);\n        url.pathname += entryPath;\n        const urlStrEntry = url.toString();\n        debug(\"urlStrEntry: \", urlStrEntry);\n\n        return new Promise(async (topresolve, _topreject) => {\n\n            const failure = async (err: any) => {\n                debug(err);\n                // topreject(err);\n                topresolve(false);\n            };\n\n            const success = async (response: IncomingMessage) => {\n\n                // Object.keys(response.headers).forEach((header: string) => {\n                //     debug(header + \" => \" + response.headers[header]);\n                // });\n\n                // debug(response);\n                // debug(response.body);\n\n                if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    // await failure(\"HTTP CODE \" + response.statusCode);\n                    topresolve(false);\n                    return;\n                }\n\n                topresolve(true);\n            };\n\n            const promise = new Promise<void>((resolve, reject) => {\n                http.request({\n                    ...new URL(urlStrEntry),\n                    headers: {},\n                    method: \"HEAD\",\n                })\n                    .on(\"response\", async (response: IncomingMessage) => {\n                        await success(response);\n                        resolve();\n                    })\n                    .on(\"error\", async (err: any) => {\n                        await failure(err);\n                        reject();\n                    })\n                    .end();\n            });\n            try {\n                await promise;\n            } catch (err) {\n                // ignore\n            }\n        });\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        return new Promise<string[]>(async (_resolve, reject) => {\n            reject(\"Not implemented.\");\n        });\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        debug(`entryStreamPromise: ${entryPath}`);\n\n        // if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n        //     return Promise.reject(\"no such path in zip exploded: \" + entryPath);\n        // }\n\n        const url = new URL(this.urlStr);\n        // url.pathname += (\"/\" + entryPath);\n        url.pathname += entryPath;\n        const urlStrEntry = url.toString();\n        debug(\"urlStrEntry: \", urlStrEntry);\n\n        return new Promise(async (topresolve, topreject) => {\n\n            const failure = async (err: any) => {\n                debug(err);\n                topreject(err);\n            };\n\n            const success = async (response: IncomingMessage) => {\n\n                // Object.keys(response.headers).forEach((header: string) => {\n                //     debug(header + \" => \" + response.headers[header]);\n                // });\n\n                // debug(response);\n                // debug(response.body);\n\n                if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    await failure(\"HTTP CODE \" + response.statusCode);\n                    return;\n                }\n\n                let length = 0;\n                const lengthStr = response.headers[\"content-length\"];\n                if (lengthStr) {\n                    length = parseInt(lengthStr, 10);\n                }\n\n                const stream = new PassThrough();\n                response.pipe(stream);\n\n                const streamAndLength: IStreamAndLength = {\n                    length,\n                    reset: async () => {\n                        return this.entryStreamPromise(entryPath);\n                    },\n                    stream,\n                };\n                topresolve(streamAndLength);\n\n                // let responseStr: string;\n                // if (response.body) {\n                //     debug(\"RES BODY\");\n                //     responseStr = response.body;\n                // } else {\n                //     debug(\"RES STREAM\");\n                //     let responseData: Buffer;\n                //     try {\n                //         responseData = await streamToBufferPromise(response);\n                //     } catch (err) {\n                //         debug(err);\n                //         return;\n                //     }\n                //     responseStr = responseData.toString(\"utf8\");\n                // }\n            };\n\n            const promise = new Promise<void>((resolve, reject) => {\n                http.get({\n                    ...new URL(urlStrEntry),\n                    headers: {},\n                })\n                    .on(\"response\", async (response: IncomingMessage) => {\n                        await success(response);\n                        resolve();\n                    })\n                    .on(\"error\", async (err: any) => {\n                        await failure(err);\n                        reject();\n                    });\n            });\n            try {\n                await promise;\n            } catch (err) {\n                // ignore\n            }\n        });\n    }\n}\n"]}