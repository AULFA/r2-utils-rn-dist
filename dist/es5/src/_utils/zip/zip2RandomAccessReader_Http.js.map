{"version":3,"file":"zip2RandomAccessReader_Http.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip2RandomAccessReader_Http.ts"],"names":[],"mappings":";;;;AAOA,8BAAgC;AAChC,qDAAwC;AAExC,iCAAqC;AACrC,6BAA+B;AAE/B,qDAA8E;AAI9E,IAAM,KAAK,GAAG,MAAM,CAAC,0CAA0C,CAAC,CAAC;AAejE;IAAmC,yCAAwB;IAMvD,uBAAqB,GAAW,EAAW,UAAkB;QAA7D,YACI,iBAAO,SAEV;QAHoB,SAAG,GAAH,GAAG,CAAQ;QAAW,gBAAU,GAAV,UAAU,CAAQ;QAJrD,iBAAW,GAAuB,SAAS,CAAC;QAC5C,sBAAgB,GAAW,CAAC,CAAC;QAC7B,oBAAc,GAAW,CAAC,CAAC;;IAKnC,CAAC;IAEM,2CAAmB,GAA1B,UAA2B,KAAa,EAAE,GAAW;QAArD,iBAiFC;QApEG,IAAI,IAAI,CAAC,WAAW,IAAI,KAAK,IAAI,IAAI,CAAC,gBAAgB,IAAI,GAAG,IAAI,IAAI,CAAC,cAAc,EAAE;YAIlF,IAAM,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAC5C,IAAM,MAAI,GAAG,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC;YAEzC,OAAO,4BAAc,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,MAAI,CAAC,CAAC,CAAC;SAC9D;QAED,IAAM,MAAM,GAAG,IAAI,oBAAW,EAAE,CAAC;QAEjC,IAAM,aAAa,GAAG,GAAG,GAAG,CAAC,CAAC;QAC9B,IAAM,KAAK,GAAM,KAAK,SAAI,aAAe,CAAC;QAI1C,IAAM,OAAO,GAAG,UAAC,GAAQ;YACrB,KAAK,CAAC,GAAG,CAAC,CAAC;QAEf,CAAC,CAAC;QAEF,IAAM,OAAO,GAAG,UAAO,GAAoB;;;;;wBACvC,IAAI,GAAG,CAAC,UAAU,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,EAAE;4BACnE,OAAO,CAAC,YAAY,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC;4BACvC,WAAO;yBACV;6BASG,IAAI,CAAC,WAAW,EAAhB,cAAgB;wBAChB,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;;wBAKb,MAAM,SAAQ,CAAC;;;;wBAEN,WAAM,mCAAqB,CAAC,GAAG,CAAC,EAAA;;wBAAzC,MAAM,GAAG,SAAgC,CAAC;;;;wBAE1C,KAAK,CAAC,KAAG,CAAC,CAAC;wBACX,MAAM,CAAC,GAAG,EAAE,CAAC;wBACb,WAAO;;wBAEX,KAAK,CAAC,4BAA0B,MAAM,CAAC,MAAQ,CAAC,CAAC;wBAEjD,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;wBAC1B,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;wBAC9B,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC;wBAE1B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBACrB,MAAM,CAAC,GAAG,EAAE,CAAC;;;;;aAEpB,CAAC;QAEF,uBAAI,CAAC,GAAG,uCACD,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KACpB,OAAO,EAAE,EAAE,KAAK,EAAE,WAAS,KAAO,EAAE,IACtC;aACG,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;aACvB,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAE1B,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,oBAAC;AAAD,CAAC,AA7FD,CAAmC,KAAK,CAAC,kBAAkB,GA6F1D;AA7FY,sCAAa","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport { http } from \"follow-redirects\";\nimport { IncomingMessage } from \"http\";\nimport { PassThrough } from \"stream\";\nimport * as yauzl from \"yauzl\";\n\nimport { bufferToStream, streamToBufferPromise } from \"../stream/BufferUtils\";\n\n// import { HttpReadableStream } from \"./HttpReadableStream\";\n\nconst debug = debug_(\"r2:utils#zip/zip2RandomAccessReader_Http\");\n\n// import * as util from \"util\";\n// export interface RandomAccessReader {\n//     _readStreamForRange(start: number, end: number): void;\n// }\n\n// YAUZL:\n// export abstract class RandomAccessReader extends EventEmitter {\n//     _readStreamForRange(start: number, end: number): void;\n//     createReadStream(options: { start: number; end: number }): void;\n//     read(buffer: Buffer, offset: number, length: number, position: number, callback: (err?: Error) => void): void;\n//     close(callback: (err?: Error) => void): void;\n// }\n\nexport class HttpZipReader extends yauzl.RandomAccessReader {\n\n    private firstBuffer: Buffer | undefined = undefined;\n    private firstBufferStart: number = 0;\n    private firstBufferEnd: number = 0;\n\n    constructor(readonly url: string, readonly byteLength: number) {\n        super();\n        // yauzl.RandomAccessReader.call(this);\n    }\n\n    public _readStreamForRange(start: number, end: number) {\n        // const length = end - start;\n        // debug(`_readStreamForRange (new HttpReadableStream) ${this.url}` +\n        //     ` content-length=${this.byteLength} start=${start} end+1=${end} (length=${length})`);\n\n        // return new HttpReadableStream(this.url, this.byteLength, start, end);\n        // =>\n\n        // const length = end - start;\n        // debug(`_read: ${size} (${this.url}` +\n        //     ` content-length=${this.byteLength} start=${this.start} end+1=${this.end} (length=${length}))`);\n        // debug(`alreadyRead: ${this.alreadyRead} (byteLength: ${length})`);\n\n        if (this.firstBuffer && start >= this.firstBufferStart && end <= this.firstBufferEnd) {\n\n            // debug(`HTTP CACHE ${this.url}: ${start}-${end} (${length}) [${this.byteLength}]`);\n\n            const begin = start - this.firstBufferStart;\n            const stop = end - this.firstBufferStart;\n\n            return bufferToStream(this.firstBuffer.slice(begin, stop));\n        }\n\n        const stream = new PassThrough();\n\n        const lastByteIndex = end - 1;\n        const range = `${start}-${lastByteIndex}`;\n\n        // debug(`HTTP GET ${this.url}: ${start}-${end} (${length}) [${this.byteLength}]`);\n\n        const failure = (err: any) => {\n            debug(err);\n            // this.stream.end();\n        };\n\n        const success = async (res: IncomingMessage) => {\n            if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {\n                failure(\"HTTP CODE \" + res.statusCode);\n                return;\n            }\n\n            // debug(res);\n\n            // debug(res.headers);\n            // debug(res.headers[\"content-type\"]);\n            // debug(`HTTP response content-range: ${res.headers[\"content-range\"]}`);\n            // debug(`HTTP response content-length: ${res.headers[\"content-length\"]}`);\n\n            if (this.firstBuffer) {\n                res.pipe(stream);\n                // // .on(\"end\", () => {\n                // //     debug(\"END\");\n                // // });\n            } else {\n                let buffer: Buffer;\n                try {\n                    buffer = await streamToBufferPromise(res);\n                } catch (err) {\n                    debug(err);\n                    stream.end();\n                    return;\n                }\n                debug(`streamToBufferPromise: ${buffer.length}`);\n\n                this.firstBuffer = buffer;\n                this.firstBufferStart = start;\n                this.firstBufferEnd = end;\n\n                stream.write(buffer);\n                stream.end();\n            }\n        };\n\n        http.get({\n            ...new URL(this.url),\n            headers: { Range: `bytes=${range}` },\n        })\n            .on(\"response\", success)\n            .on(\"error\", failure);\n\n        return stream;\n    }\n}\n// util.inherits(HttpZipReader, yauzl.RandomAccessReader);\n\n// // tslint:disable-next-line:space-before-function-paren\n// HttpZipReader.prototype._readStreamForRange = function (start: number, end: number) {\n\n// };\n"]}