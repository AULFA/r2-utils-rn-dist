{"version":3,"file":"zip2.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip2.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport { http } from \"follow-redirects\";\nimport { IncomingMessage } from \"http\";\nimport * as yauzl from \"yauzl\";\n\nimport { isHTTP } from \"../http/UrlUtils\";\nimport { streamToBufferPromise } from \"../stream/BufferUtils\";\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\nimport { HttpZipReader } from \"./zip2RandomAccessReader_Http\";\n\nconst debug = debug_(\"r2:utils#zip/zip2\");\n\ninterface IStringKeyedObject { [key: string]: any; }\n\nexport class Zip2 extends Zip {\n\n    public static async loadPromise(filePath: string): Promise<IZip> {\n        if (isHTTP(filePath)) {\n            return Zip2.loadPromiseHTTP(filePath);\n        }\n\n        return new Promise<IZip>((resolve, reject) => {\n\n            yauzl.open(filePath, { lazyEntries: true, autoClose: false }, (err, zip) => {\n                if (err || !zip) {\n                    debug(\"yauzl init ERROR\");\n                    debug(err);\n                    reject(err);\n                    return;\n                }\n                const zip2 = new Zip2(filePath, zip);\n\n                zip.on(\"error\", (erro) => {\n                    debug(\"yauzl ERROR\");\n                    debug(erro);\n                    reject(erro);\n                });\n\n                zip.readEntry(); // next (lazyEntries)\n                zip.on(\"entry\", (entry) => {\n                    // if (/\\/$/.test(entry.fileName)) {\n                    if (entry.fileName[entry.fileName.length - 1] === \"/\") {\n                        // skip directories / folders\n                    } else {\n                        // debug(entry.fileName);\n                        zip2.addEntry(entry);\n                    }\n                    zip.readEntry(); // next (lazyEntries)\n                });\n\n                zip.on(\"end\", () => {\n                    debug(\"yauzl END\");\n                    resolve(zip2);\n                });\n\n                zip.on(\"close\", () => {\n                    debug(\"yauzl CLOSE\");\n                });\n            });\n        });\n    }\n\n    private static async loadPromiseHTTP(filePath: string): Promise<IZip> {\n\n        return new Promise<IZip>(async (resolve, reject) => {\n\n            const failure = (err: any) => {\n                debug(err);\n                reject(err);\n            };\n\n            const success = async (res: IncomingMessage) => {\n                if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {\n                    failure(\"HTTP CODE \" + res.statusCode);\n                    return;\n                }\n\n                debug(filePath);\n                debug(res.headers);\n\n                // if (!res.headers[\"content-type\"]\n                //     || res.headers[\"content-type\"] !== \"application/epub+zip\") {\n                //     reject(\"content-type not supported!\");\n                //     return;\n                // }\n\n                // TODO: if the HTTP server does not provide Content-Length,\n                // then fallback on download, but interrupt (req.abort())\n                // if response payload reaches the max limit\n                if (!res.headers[\"content-length\"]) {\n                    reject(\"content-length not supported!\");\n                    return;\n                }\n                const httpZipByteLength = parseInt(res.headers[\"content-length\"] as string, 10);\n                debug(`Content-Length: ${httpZipByteLength}`);\n\n                if (!res.headers[\"accept-ranges\"]\n                    // Note: some servers have several headers with the same value!\n                    // (erm, https://raw.githubusercontent.com)\n                    // (comma-separated values, so we can't match \"bytes\" exactly)\n                    || res.headers[\"accept-ranges\"].indexOf(\"bytes\") < 0) {\n\n                    if (httpZipByteLength > (2 * 1024 * 1024)) {\n                        reject(\"accept-ranges not supported, file too big to download: \" + httpZipByteLength);\n                        return;\n                    }\n                    debug(\"Downloading: \" + filePath);\n\n                    const failure_ = (err: any) => {\n\n                        debug(err);\n                        reject(err);\n                    };\n\n                    const success_ = async (ress: IncomingMessage) => {\n                        if (ress.statusCode && (ress.statusCode < 200 || ress.statusCode >= 300)) {\n                            failure_(\"HTTP CODE \" + ress.statusCode);\n                            return;\n                        }\n\n                        // debug(filePath);\n                        // debug(res.headers);\n                        let buffer: Buffer;\n                        try {\n                            buffer = await streamToBufferPromise(ress);\n                        } catch (err) {\n                            debug(err);\n                            reject(err);\n                            return;\n                        }\n\n                        yauzl.fromBuffer(buffer,\n                            { lazyEntries: true },\n                            (err, zip) => {\n                                if (err || !zip) {\n                                    debug(\"yauzl init ERROR\");\n                                    debug(err);\n                                    reject(err);\n                                    return;\n                                }\n                                const zip2 = new Zip2(filePath, zip);\n\n                                zip.on(\"error\", (erro) => {\n                                    debug(\"yauzl ERROR\");\n                                    debug(erro);\n                                    reject(erro);\n                                });\n\n                                zip.readEntry(); // next (lazyEntries)\n                                zip.on(\"entry\", (entry) => {\n                                    if (entry.fileName[entry.fileName.length - 1] === \"/\") {\n                                        // skip directories / folders\n                                    } else {\n                                        // debug(entry.fileName);\n                                        zip2.addEntry(entry);\n                                    }\n                                    zip.readEntry(); // next (lazyEntries)\n                                });\n\n                                zip.on(\"end\", () => {\n                                    debug(\"yauzl END\");\n                                    resolve(zip2);\n                                });\n\n                                zip.on(\"close\", () => {\n                                    debug(\"yauzl CLOSE\");\n                                });\n                            });\n                    };\n\n                    http.get({\n                        ...new URL(filePath),\n                        headers: {},\n                    })\n                        .on(\"response\", success_)\n                        .on(\"error\", failure_);\n\n                    return;\n                }\n\n                const httpZipReader = new HttpZipReader(filePath, httpZipByteLength);\n                yauzl.fromRandomAccessReader(httpZipReader, httpZipByteLength,\n                    { lazyEntries: true, autoClose: false },\n                    (err, zip) => {\n                        if (err || !zip) {\n                            debug(\"yauzl init ERROR\");\n                            debug(err);\n                            reject(err);\n                            return;\n                        }\n                        (zip as any).httpZipReader = httpZipReader;\n                        const zip2 = new Zip2(filePath, zip);\n\n                        zip.on(\"error\", (erro: any) => {\n                            debug(\"yauzl ERROR\");\n                            debug(erro);\n                            reject(erro);\n                        });\n\n                        zip.readEntry(); // next (lazyEntries)\n                        zip.on(\"entry\", (entry: any) => {\n                            if (entry.fileName[entry.fileName.length - 1] === \"/\") {\n                                // skip directories / folders\n                            } else {\n                                // debug(entry.fileName);\n                                zip2.addEntry(entry);\n                            }\n                            zip.readEntry(); // next (lazyEntries)\n                        });\n\n                        zip.on(\"end\", () => {\n                            debug(\"yauzl END\");\n                            resolve(zip2);\n                        });\n\n                        zip.on(\"close\", () => {\n                            debug(\"yauzl CLOSE\");\n                        });\n                    });\n            };\n\n            http.request({\n                ...new URL(filePath),\n                headers: {},\n                method: \"HEAD\",\n            })\n                .on(\"response\", success)\n                .on(\"error\", failure)\n                .end();\n    });\n    }\n\n    private entries: IStringKeyedObject;\n\n    private constructor(readonly filePath: string, readonly zip: any) {\n        super();\n\n        // see addEntry()\n        this.entries = {};\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: Zip2 -- \" + this.filePath);\n        if (this.zip) {\n            this.zip.close();\n        }\n    }\n\n    public entriesCount(): number {\n        return this.zip.entryCount;\n    }\n\n    public hasEntries(): boolean {\n        return this.entriesCount() > 0;\n    }\n\n    public async hasEntry(entryPath: string): Promise<boolean> {\n        return this.hasEntries() && this.entries[entryPath];\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        if (!this.hasEntries()) {\n            return Promise.resolve([]);\n        }\n        return Promise.resolve(Object.keys(this.entries));\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            return Promise.reject(\"no such path in zip: \" + entryPath);\n        }\n\n        const entry = this.entries[entryPath];\n\n        return new Promise<IStreamAndLength>((resolve, reject) => {\n\n            this.zip.openReadStream(entry, (err: any, stream: NodeJS.ReadableStream) => {\n                if (err) {\n                    debug(\"yauzl openReadStream ERROR\");\n                    debug(err);\n                    reject(err);\n                    return;\n                }\n                const streamAndLength: IStreamAndLength = {\n                    length: entry.uncompressedSize as number,\n                    reset: async () => {\n                        return this.entryStreamPromise(entryPath);\n                    },\n                    stream,\n                };\n                resolve(streamAndLength);\n            });\n        });\n    }\n\n    private addEntry(entry: any) {\n        this.entries[entry.fileName] = entry;\n    }\n}\n"]}