{"version":3,"file":"zip3.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip3.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport { http } from \"follow-redirects\";\nimport * as unzipper from \"unzipper\";\n\nimport { isHTTP } from \"../http/UrlUtils\";\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\n\nconst debug = debug_(\"r2:utils#zip/zip3\");\n\ninterface IStringKeyedObject { [key: string]: any; }\n\nexport class Zip3 extends Zip {\n\n    public static async loadPromise(filePath: string): Promise<IZip> {\n        if (isHTTP(filePath)) {\n            return Zip3.loadPromiseHTTP(filePath);\n        }\n\n        return new Promise<IZip>(async (resolve, reject) => {\n            let zip: any;\n            try {\n                zip = await unzipper.Open.file(filePath);\n            } catch (err) {\n                debug(err);\n                reject(err);\n                return;\n            }\n            debug(zip);\n            resolve(new Zip3(filePath, zip));\n        });\n    }\n\n    private static async loadPromiseHTTP(filePath: string): Promise<IZip> {\n\n        return new Promise<IZip>(async (resolve, reject) => {\n            let zip: any;\n            try {\n                zip = await unzipper.Open.url(http.get,\n                    {\n                        ...new URL(filePath),\n                        headers: {},\n                    });\n            } catch (err) {\n                debug(err);\n                reject(err);\n                return;\n            }\n            debug(zip);\n            resolve(new Zip3(filePath, zip));\n        });\n    }\n\n    private entries: IStringKeyedObject;\n\n    private constructor(readonly filePath: string, readonly zip: any) {\n        super();\n\n        this.entries = {};\n        this.zip.files.forEach((file: any) => {\n            this.entries[file.path] = file;\n        });\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: Zip3 -- \" + this.filePath);\n        if (this.zip) {\n            // TODO?\n            // this.zip.close();\n        }\n    }\n\n    public entriesCount(): number {\n        return this.zip.files.length;\n    }\n\n    public hasEntries(): boolean {\n        return this.entriesCount() > 0;\n    }\n\n    public async hasEntry(entryPath: string): Promise<boolean> {\n        return this.hasEntries() && this.entries[entryPath];\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        if (!this.hasEntries()) {\n            return Promise.resolve([]);\n        }\n        return Promise.resolve(Object.keys(this.entries));\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            return Promise.reject(\"no such path in zip: \" + entryPath);\n        }\n\n        return new Promise<IStreamAndLength>((resolve, _reject) => {\n\n            const entry = this.entries[entryPath];\n            debug(entry);\n\n            const stream: NodeJS.ReadableStream = entry.stream();\n            const streamAndLength: IStreamAndLength = {\n                length: entry.size,\n                reset: async () => {\n                    return this.entryStreamPromise(entryPath);\n                },\n                stream,\n            };\n            resolve(streamAndLength);\n        });\n    }\n}\n"]}