{"version":3,"file":"zip-ex.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip-ex.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as path from \"path\";\nimport * as rnfs from \"react-native-fs\";\nimport {PassThrough} from \"stream\";\n\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\n\n// import { bufferToStream } from \"../stream/BufferUtils\";\n\nconst debug = debug_(\"r2:utils#zip/zip-ex\");\n\nexport class ZipExploded extends Zip {\n\n    public static async loadPromise(dirPath: string): Promise<IZip> {\n        return Promise.resolve(new ZipExploded(dirPath));\n    }\n\n    private constructor(readonly dirPath: string) {\n        super();\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: ZipExploded -- \" + this.dirPath);\n    }\n\n    public entriesCount(): number {\n        return 0; // TODO: hacky! (not really needed ... but still)\n    }\n\n    public hasEntries(): boolean {\n        return true; // TODO: hacky\n    }\n\n    public async hasEntry(entryPath: string): Promise<boolean> {\n        try {\n            await rnfs.stat(path.join(this.dirPath, entryPath));\n            return this.hasEntries();\n        } catch (_) {\n            return false;\n        }\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        return new Promise<string[]>(async (resolve, _reject) => {\n\n            const dirStats = await rnfs.stat(this.dirPath);\n            const dirPathNormalized = dirStats.originalFilepath;\n\n            const files: rnfs.ReadDirItem[] = await rnfs.readDir(this.dirPath);\n\n            const adjustedFiles = await Promise.all(files.map(async (file) => {\n                const fileStats = await rnfs.stat(file.path);\n                const filePathNormalized = fileStats.originalFilepath;\n\n                let relativeFilePath = filePathNormalized.replace(dirPathNormalized, \"\");\n                debug(relativeFilePath);\n\n                // TODO: is this necessary?\n                if (relativeFilePath.indexOf(\"/\") === 0) {\n                    relativeFilePath = relativeFilePath.substr(1);\n                }\n\n                return relativeFilePath;\n            }));\n            resolve(adjustedFiles);\n        });\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        const hasEntry = await this.hasEntry(entryPath);\n\n        if (!this.hasEntries() || !hasEntry) {\n            return Promise.reject(\"no such path in zip exploded: \" + entryPath);\n        }\n\n        const fullPath = path.join(this.dirPath, entryPath);\n        const stats = await rnfs.stat(fullPath);\n        const content = await rnfs.readFile(fullPath);\n\n        const contentStream = new PassThrough();\n        contentStream.end(content);\n\n        const streamAndLength: IStreamAndLength = {\n            length: Number(stats.size),\n            reset: async () => {\n                return this.entryStreamPromise(entryPath);\n            },\n            stream: contentStream,\n        };\n\n        return Promise.resolve(streamAndLength);\n    }\n}\n"]}